{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 4-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 8-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 16-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 32-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 4-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 8-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 16-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 32-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 4-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 8-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 16-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 32-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 4-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 8-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 16-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 32-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 4-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 8-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 16-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 32-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 4-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 8-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 16-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 32-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 4-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 8-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 16-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 32-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 4-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 8-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 16-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 32-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 4-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 8-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 16-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 32-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 4-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 8-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 16-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 32-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 4-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 8-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 16-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 32-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 4-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 8-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 16-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Design a pipelined 32-bit ALU in SystemVerilog with operation selection using an opcode.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Write a SystemVerilog module for a 4-bit ALU that supports operations: ADD, SUB, AND, OR.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "code", "prompt": "Implement a SystemVerilog ALU that handles overflow and zero detection for a 8-bit input.", "completion": "module alu #(parameter WIDTH = 8) (\n    input logic [WIDTH-1:0] A, B,\n    input logic [1:0] op,\n    output logic [WIDTH-1:0] Y\n);\n    always_comb begin\n        case(op)\n            2'b00: Y = A + B;\n            2'b01: Y = A - B;\n            2'b10: Y = A & B;\n            2'b11: Y = A | B;\n        endcase\n    end\nendmodule"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 4-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 32-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 16-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 8-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 4-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 32-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 16-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 8-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 4-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 32-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 16-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 8-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 4-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 32-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 16-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 8-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write an assertion that ensures the ALU performs addition correctly for all positive inputs.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to detect overflow in a 4-bit ALU.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "ALU", "task": "assertion", "prompt": "Provide an assertion to check if an ALU's output is zero when performing subtraction.", "completion": "assert property (@(posedge clk) disable iff (!reset) \n    (alu_op == 2'b00 && A + B == Y) or\n    (alu_op == 2'b01 && A - B == Y) or\n    (alu_op == 2'b10 && A & B == Y) or\n    (alu_op == 2'b11 && A | B == Y)\n);"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Design a D Flip-Flop with both set and reset functionality in SystemVerilog.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Write a SystemVerilog module for a positive edge-triggered D Flip-Flop with asynchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "code", "prompt": "Create a SystemVerilog D Flip-Flop with enable and synchronous reset.", "completion": "module dff (\n    input logic clk, reset, D,\n    output logic Q\n);\n    always_ff @(posedge clk or posedge reset) begin\n        if (reset)\n            Q <= 0;\n        else\n            Q <= D;\n    end\nendmodule"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Create an assertion that checks if enable disables input propagation in DFF.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Write a SystemVerilog Assertion to check that DFF output follows input at rising edge of clk.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "DFF", "task": "assertion", "prompt": "Provide an assertion to verify that reset properly clears the DFF output.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    Q == D\n);"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Implement a BCD incrementor that wraps from 9 to 0 in SystemVerilog.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Write a SystemVerilog module to increment a 4-bit BCD number.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "code", "prompt": "Design a SystemVerilog decrementor for a 4-bit BCD with underflow handling.", "completion": "module bcd_incrementor (\n    input logic [3:0] bcd_in,\n    output logic [3:0] bcd_out\n);\n    always_comb begin\n        if (bcd_in == 4'd9)\n            bcd_out = 4'd0;\n        else\n            bcd_out = bcd_in + 1;\n    end\nendmodule"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Provide an assertion for checking correct BCD output after increment.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Write an assertion to verify BCD incrementor rolls over from 9 to 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
{"category": "BCD", "task": "assertion", "prompt": "Create an assertion to ensure BCD decrementor does not go below 0.", "completion": "assert property (@(posedge clk) disable iff (!reset)\n    (bcd_in == 4'd9) |-> (bcd_out == 4'd0)\n);"}
