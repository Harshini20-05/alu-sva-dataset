{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 4-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[3] == B[3]) && (Y[3] != A[3]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 8-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [7:0] A, B, input logic [1:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for addition correctness in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 16-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 16'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 8-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[7] == B[7]) && (Y[7] != A[7]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 8-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 8-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 8-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[7] == B[7]) && (Y[7] != A[7]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 8-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[7] == B[7]) && (Y[7] != A[7]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 4-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[3] == B[3]) && (Y[3] != A[3]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for correct subtraction result in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [4:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 4-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[3] == B[3]) && (Y[3] != A[3]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for addition correctness in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [3:0] A, B, input logic [1:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [3:0] A, B, input logic [1:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for correct subtraction result in a 8-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [4:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 8-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 8'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 8-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 8'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for correct subtraction result in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [7:0] A, B, input logic [1:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for addition correctness in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for correct subtraction result in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [7:0] A, B, input logic [1:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for addition correctness in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 16-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 4-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[3] == B[3]) && (Y[3] != A[3]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 8-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [4:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 16-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 16'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 8-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 8-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[7] == B[7]) && (Y[7] != A[7]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 4-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for addition correctness in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [15:0] A, B, input logic [4:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 8-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
