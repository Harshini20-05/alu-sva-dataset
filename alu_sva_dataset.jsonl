{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 4-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[3] == B[3]) && (Y[3] != A[3]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 8-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [7:0] A, B, input logic [1:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for addition correctness in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 16-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 16'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 8-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[7] == B[7]) && (Y[7] != A[7]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 8-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 8-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 8-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[7] == B[7]) && (Y[7] != A[7]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 8-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[7] == B[7]) && (Y[7] != A[7]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 4-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[3] == B[3]) && (Y[3] != A[3]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for correct subtraction result in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [4:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 4-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[3] == B[3]) && (Y[3] != A[3]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for addition correctness in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [3:0] A, B, input logic [1:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for no unsigned overflow in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [3:0] A, B, input logic [1:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for correct subtraction result in a 8-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [4:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 8-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 8'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 8-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 8'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for correct subtraction result in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [7:0] A, B, input logic [1:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for addition correctness in a 16-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for correct subtraction result in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [7:0] A, B, input logic [1:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for addition correctness in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, MUL, DIV.", "completion": "module alu(input logic [15:0] A, B, input logic [3:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A * B;\n            4'd3: Y = (B != 0) ? A / B : 0;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 16-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 4-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[3] == B[3]) && (Y[3] != A[3]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 8-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 16-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[15] == B[15]) && (Y[15] != A[15]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [3:0] A, B, input logic [4:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 16-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 16'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 8-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [4:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for overflow detection in a 8-bit ALU.", "completion": "property overflow_detect;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) && (A[7] == B[7]) && (Y[7] != A[7]) |-> overflow_flag;\nendproperty\nassert property (overflow_detect);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for division by zero prevention in a 4-bit ALU.", "completion": "property div_by_zero_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == DIV) |-> (B != 0);\nendproperty\nassert property (div_by_zero_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 4-bit ALU in SystemVerilog that supports operations: ADD, SUB, SHIFT_LEFT, SHIFT_RIGHT.", "completion": "module alu(input logic [3:0] A, B, input logic [3:0] op, output logic [3:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A << 1;\n            4'd3: Y = A >> 1;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for addition correctness in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 8-bit ALU in SystemVerilog that supports operations: ADD, SUB, AND, OR.", "completion": "module alu(input logic [7:0] A, B, input logic [3:0] op, output logic [7:0] Y);\n    always_comb begin\n        case(op)\n            4'd0: Y = A + B;\n            4'd1: Y = A - B;\n            4'd2: Y = A & B;\n            4'd3: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for zero flag check in a 4-bit ALU.", "completion": "property zero_flag_check;\n    @(posedge clk) disable iff (!reset)\n    (Y == 4'b0) |-> zero_flag;\nendproperty\nassert property (zero_flag_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB, XOR, AND, OR.", "completion": "module alu(input logic [15:0] A, B, input logic [4:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            5'd0: Y = A + B;\n            5'd1: Y = A - B;\n            5'd2: Y = A ^ B;\n            5'd3: Y = A & B;\n            5'd4: Y = A | B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 4-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a 16-bit ALU in SystemVerilog that supports operations: ADD, SUB.", "completion": "module alu(input logic [15:0] A, B, input logic [1:0] op, output logic [15:0] Y);\n    always_comb begin\n        case(op)\n            2'd0: Y = A + B;\n            2'd1: Y = A - B;\n        endcase\n    end\nendmodule"}
{"prompt": "Write a SystemVerilog Assertion for output never exceeds max value in a 8-bit ALU.", "completion": "property generic_check;\n    @(posedge clk) disable iff (!reset)\n    (alu_op == ADD) |-> (Y == A + B);\nendproperty\nassert property (generic_check);"}
{"prompt": "Write a SystemVerilog Assertion to check ALU overflow flag after addition.", "completion": "property p_alu_overflow_after_add;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (alu_op == ADD && (src_a + src_b > 8'hFF)) |-> overflow_flag;\nendproperty\n\nassert property (p_alu_overflow_after_add)\nelse $error(\"Error: Overflow flag not set after addition in ALU\");"}
{"prompt": "Write a SystemVerilog Assertion to check zero flag after subtraction.", "completion": "property p_zero_flag_after_sub;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (alu_op == SUB && (src_a - src_b == 0)) |-> zero_flag;\nendproperty\n\nassert property (p_zero_flag_after_sub)\nelse $error(\"Error: Zero flag not set after subtraction in ALU\");"}
{"prompt": "Write a SystemVerilog Assertion to check carry flag after addition.", "completion": "property p_carry_flag_after_add;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (alu_op == ADD && (src_a + src_b) > 8'hFF) |-> carry_flag;\nendproperty\n\nassert property (p_carry_flag_after_add)\nelse $error(\"Error: Carry flag not set correctly after addition in ALU\");"}
{"prompt": "Write a SystemVerilog Assertion to check ALU result for AND operation.", "completion": "property p_alu_result_and;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (alu_op == AND) |-> (alu_result == (src_a & src_b));\nendproperty\n\nassert property (p_alu_result_and)\nelse $error(\"Error: ALU result incorrect for AND operation\");"}
{"prompt": "Write a SystemVerilog Assertion to check ALU result for OR operation.", "completion": "property p_alu_result_or;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (alu_op == OR) |-> (alu_result == (src_a | src_b));\nendproperty\n\nassert property (p_alu_result_or)\nelse $error(\"Error: ALU result incorrect for OR operation\");"}
{"prompt": "Write a SystemVerilog Assertion to check ALU result for XOR operation.", "completion": "property p_alu_result_xor;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (alu_op == XOR) |-> (alu_result == (src_a ^ src_b));\nendproperty\n\nassert property (p_alu_result_xor)\nelse $error(\"Error: ALU result incorrect for XOR operation\");"}
{"prompt": "Write a SystemVerilog Assertion to check ALU result remains stable when enable=0.", "completion": "property p_alu_result_stable_when_disabled;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (!alu_enable) |-> $stable(alu_result);\nendproperty\n\nassert property (p_alu_result_stable_when_disabled)\nelse $error(\"Error: ALU result changed while ALU disabled\");"}
{"prompt": "Write a SystemVerilog Assertion to check negative flag for subtraction.", "completion": "property p_negative_flag_after_sub;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (alu_op == SUB && (src_a < src_b)) |-> negative_flag;\nendproperty\n\nassert property (p_negative_flag_after_sub)\nelse $error(\"Error: Negative flag not set when result is negative\");"}
{"prompt": "Write a SystemVerilog Assertion to verify D-FF captures input on rising edge of clock.", "completion": "property p_dff_capture_on_clock;\n    @(posedge clk)\n    disable iff (!rst_n)\n    d |-> (q == d);\nendproperty\n\nassert property (p_dff_capture_on_clock)\nelse $error(\"Error: D-FF did not capture input on clock edge\");"}
{"prompt": "Write a SystemVerilog Assertion to verify D-FF holds value when enable=0.", "completion": "property p_dff_hold_when_disabled;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (!enable) |-> $stable(q);\nendproperty\n\nassert property (p_dff_hold_when_disabled)\nelse $error(\"Error: D-FF output changed when enable=0\");"}
{"prompt": "Write a SystemVerilog Assertion to check asynchronous reset clears output.", "completion": "property p_dff_async_reset;\n    @(posedge clk or negedge rst_n)\n    (!rst_n) |-> (q == 0);\nendproperty\n\nassert property (p_dff_async_reset)\nelse $error(\"Error: D-FF output not cleared during reset\");"}
{"prompt": "Write a SystemVerilog Assertion to verify that output changes only on clock edge.", "completion": "property p_dff_output_on_clock_only;\n    @(posedge clk)\n    disable iff (!rst_n)\n    $changed(q) |-> $rose(clk);\nendproperty\n\nassert property (p_dff_output_on_clock_only)\nelse $error(\"Error: D-FF output changed without clock edge\");"}
{"prompt": "Write a SystemVerilog Assertion to verify BCD increment by 1.", "completion": "property p_bcd_increment;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (enable && inc_dec == 1) |-> (bcd_out == bcd_in + 1);\nendproperty\n\nassert property (p_bcd_increment)\nelse $error(\"Error: BCD increment failed\");"}
{"prompt": "Write a SystemVerilog Assertion to verify BCD decrement by 1.", "completion": "property p_bcd_decrement;\n    @(posedge clk)\n    disable iff (!rst_n)\n    (enable && inc_dec == 0) |-> (bcd_out == bcd_in - 1);\nendproperty\n\nassert property (p_bcd_decrement)\nelse $error(\"Error: BCD decrement failed\");"}
{"prompt": "Write a SystemVerilog Assertion to check BCD reset sets output to zero.", "completion": "property p_bcd_reset;\n    @(posedge clk or negedge rst_n)\n    (!rst_n) |-> (bcd_out == 12'd0);\nendproperty\n\nassert property (p_bcd_reset)\nelse $error(\"Error: BCD counter did not reset correctly\");"}
